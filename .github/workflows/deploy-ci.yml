name: deploy-ci

on:
  workflow_dispatch:
  push:
    branches:
      - 'main'
  #pull_request:
  #  branches: [ main ]

jobs:
  push_to_registry:
    name: CI-deploy
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: |
          echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
          echo "dir=$(npm config get cache)" >> ${GITHUB_ENV}
          echo "dir=$(npm config get cache)"

      - name: Apply npm cache
        uses: actions/cache@v3
        id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-dependencies-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-dependencies-

      - name: Check if cache was hit
        run: echo "cache hit = ${{ steps.npm-cache.outputs.cache-hit }}"

#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/catguild-admin-web:main
          # 将 npm 缓存目录传递给 Docker 构建
          build-args: |
            NPM_CACHE_DIR=${{ env.dir }}